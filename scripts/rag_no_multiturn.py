from sqlalchemy import create_engine
from langchain_community.utilities import SQLDatabase
from langchain_experimental.sql import SQLDatabaseChain
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import initialize_agent, Tool, AgentType
from sqlalchemy import create_engine
from langchain_core.prompts import PromptTemplate

from typing import List, Optional

from langchain.chains.llm import LLMChain
from langchain_community.tools.sql_database.prompt import QUERY_CHECKER
from langchain_core.callbacks.manager import CallbackManagerForChainRun

INTERMEDIATE_STEPS_KEY = "intermediate_steps"
SQL_QUERY = "SQLQuery:"
SQL_RESULT = "SQLResult:"


# K·∫øt n·ªëi MySQL
import yaml
with open("config/config.yaml") as f:
    cfg = yaml.safe_load(f)
conn_str = cfg["mysql_db"]["url"]
engine = create_engine(
    conn_str,
    connect_args={
        "ssl": {"ssl-mode": "REQUIRED"}
    }
)
db = SQLDatabase(engine)

# T·∫°o SQLDatabaseChain
llm = ChatGoogleGenerativeAI(
    google_api_key=cfg["gemini"]["api_key"],
    model=cfg["gemini"]["model"], 
    temperature=0)

### S·ª≠ d·ª•ng prompt cho SQLDatabaseChain ƒë·ªÉ ki·ªÉm so√°t ch·∫∑t ch·∫Ω h∆°n truy v·∫•n SQL (B·∫£n ch·∫•t th√¨ trong SQLDatabaseChain c≈©ng ch·ª©a 1 LLM)
_SQL_PROMPT = """B·∫°n l√† m·ªôt chuy√™n gia MySQL. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra m·ªôt truy v·∫•n MySQL H·ª¢P L·ªÜ V√Ä NGUY√äN B·∫¢N (raw SQL) d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng.

QUY T·∫ÆC C·ª∞C K·ª≤ QUAN TR·ªåNG:
1.  **KH√îNG B·ªåC TRUY V·∫§N SQL TRONG MARKDOWN.**
2.  **S·ª≠ d·ª•ng D·∫§U BACKTICK (`)** cho t·∫•t c·∫£ t√™n b·∫£ng/c·ªôt c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát.
3.  **Lu√¥n s·ª≠ d·ª•ng single quotes cho gi√° tr·ªã chu·ªói.** V√≠ d·ª•: 'H√† N·ªôi' ‚Äî kh√¥ng d√πng "H√† N·ªôi".
4.  **Lu√¥n gi·ªõi h·∫°n truy v·∫•n t·ªëi ƒëa 10 k·∫øt qu·∫£** tr·ª´ khi ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh kh√°c.
5.  **Ch·ªâ truy v·∫•n c√°c c·ªôt c·∫ßn thi·∫øt**, kh√¥ng SELECT *.
6.  **Ki·ªÉm tra k·ªπ c√∫ ph√°p MySQL** v√† ƒë·∫£m b·∫£o c√°c t√™n b·∫£ng/c·ªôt l√† ch√≠nh x√°c theo l∆∞·ª£c ƒë·ªì.
7.  **V·∫•n ƒë·ªÅ ng√†y th√°ng c·∫ßn ƒë√∫ng ƒë·ªãnh d·∫°ng. V√≠ d·ª•: n·∫øu n√≥i th√°ng 8-2023 th√¨ ph·∫£i chuy·ªÉn v·ªÅ l·∫•y t·ª´ '2023-08-01' ƒë·∫øn '2023-08-31' cho DATE, kh√¥ng d√πng '2023-08' hay '2023'...**

D·ª±a tr√™n c√°c th√¥ng tin b·∫£ng sau:
{table_info}
C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {input}
C√¢u tr·∫£ l·ªùi:"""


SQL_PROMPT = PromptTemplate(
    input_variables=["input", "table_info"], # L∆∞u √Ω t√™n input_variables m·ªõi
    template=_SQL_PROMPT,
)

class CustomSQLDatabaseChain(SQLDatabaseChain):
    def _call(
        self,
        inputs: dict,
        run_manager: Optional[CallbackManagerForChainRun] = None,
    ) -> dict:
        _run_manager = run_manager or CallbackManagerForChainRun.get_noop_manager()

        # L·∫•y input
        input_text = f"{inputs[self.input_key]}\n{SQL_QUERY}"
        _run_manager.on_text(input_text, verbose=self.verbose)

        # Th√¥ng tin b·∫£ng
        table_names_to_use = inputs.get("table_names_to_use")
        table_info = self.database.get_table_info(table_names=table_names_to_use)

        llm_inputs = {
            "input": input_text,
            "top_k": str(self.top_k),
            "dialect": self.database.dialect,
            "table_info": table_info,
            "stop": ["\nSQLResult:"],
        }

        if self.memory is not None:
            for k in self.memory.memory_variables:
                llm_inputs[k] = inputs[k]

        intermediate_steps: List = []

        try:
            intermediate_steps.append(llm_inputs.copy())

            ############## L·∫ßn g·ªçi ƒë·∫ßu ti√™n
            sql_cmd = self.llm_chain.predict(
                callbacks=_run_manager.get_child(),
                **llm_inputs,
            ).strip()

            

            if self.return_sql:
                return {self.output_key: sql_cmd}

            # Ph·∫ßn c√≤n l·∫°i gi·ªëng g·ªëc
            if not self.use_query_checker:
                _run_manager.on_text(sql_cmd, color="green", verbose=self.verbose)
                intermediate_steps.append(sql_cmd)
                intermediate_steps.append({"sql_cmd": sql_cmd})

                if SQL_QUERY in sql_cmd:
                    sql_cmd = sql_cmd.split(SQL_QUERY)[1].strip()
                if SQL_RESULT in sql_cmd:
                    sql_cmd = sql_cmd.split(SQL_RESULT)[0].strip()

                result = self.database.run(sql_cmd)
                intermediate_steps.append(str(result))

            else:
                # logic query_checker gi·ªØ nguy√™n
                query_checker_prompt = self.query_checker_prompt or PromptTemplate(
                    template=QUERY_CHECKER, input_variables=["query", "dialect"]
                )
                query_checker_chain = LLMChain(
                    llm=self.llm_chain.llm, prompt=query_checker_prompt
                )
                query_checker_inputs = {"query": sql_cmd, "dialect": self.database.dialect}
                checked_sql_command: str = query_checker_chain.predict(
                    callbacks=_run_manager.get_child(), **query_checker_inputs
                ).strip()
                
                # Clean markdown n·∫øu c·∫ßn
                if "```sql" in checked_sql_command:
                    checked_sql_command = checked_sql_command.replace("```sql", "").replace("```", "").strip()
                    print("üí¨ Cleaned SQL (checker):\n", checked_sql_command)
                
                intermediate_steps.append(checked_sql_command)
                _run_manager.on_text(checked_sql_command, color="green", verbose=self.verbose)
                intermediate_steps.append({"sql_cmd": checked_sql_command})
                result = self.database.run(checked_sql_command)
                intermediate_steps.append(str(result))
                sql_cmd = checked_sql_command

            _run_manager.on_text("\nSQLResult: ", verbose=self.verbose)
            _run_manager.on_text(str(result), color="yellow", verbose=self.verbose)

            # Return final result
            if self.return_direct:
                final_result = result
            else:
                _run_manager.on_text("\nAnswer:", verbose=self.verbose)
                input_text += f"{sql_cmd}\nSQLResult: {result}\nAnswer:"
                llm_inputs["input"] = input_text
                intermediate_steps.append(llm_inputs.copy())
                final_result = self.llm_chain.predict(
                    callbacks=_run_manager.get_child(),
                    **llm_inputs,
                ).strip()
                intermediate_steps.append(final_result)
                _run_manager.on_text(final_result, color="green", verbose=self.verbose)

            chain_result: dict = {self.output_key: final_result}
            if self.return_intermediate_steps:
                chain_result[INTERMEDIATE_STEPS_KEY] = intermediate_steps
            return chain_result

        except Exception as exc:
            exc.intermediate_steps = intermediate_steps
            raise exc


# Thay th·∫ø SQLDatabaseChain c≈© b·∫±ng custom chain
sql_chain = CustomSQLDatabaseChain.from_llm(
    llm,
    db,
    prompt=SQL_PROMPT,
    verbose=True,
    use_query_checker=True,
    return_direct=True,  # Tr·∫£ v·ªÅ k·∫øt qu·∫£ tr·ª±c ti·∫øp kh√¥ng qua format
    #return_sql=True
)



### Agent g·ªìm LLM v√† tool. Tool ·ªü ƒë√¢y l√† sql_chain (t·ª©c l√† c√≥ 2 con LLMs)
# Tool cho Agent
tools = [
    Tool(
        name="SQL Database",
        func=sql_chain.run,
        description=(
            "D√πng ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi li√™n quan d·ªØ li·ªáu b√°n h√†ng, kh√°ch h√†ng, s·∫£n ph·∫©m, "
            "nh√¢n vi√™n, chi nh√°nh v√† KPI. LLM c·∫ßn t·ª± x√°c ƒë·ªãnh b·∫£ng n√†o li√™n quan, join nh∆∞ th·∫ø n√†o "
            "v√† t√≠nh to√°n aggregate khi c·∫ßn."
        )
    )
]

# Kh·ªüi t·∫°o Agent
agent = initialize_agent(
    tools,
    llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True,
    max_iterations=5,  # Gi·ªõi h·∫°n s·ªë v√≤ng l·∫∑p ƒë·ªÉ tr√°nh qu√° d√†i
)

# Query th·ª≠
if __name__ == "__main__":
    while True:
        question = input("Nh·∫≠p c√¢u h·ªèi (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ")
        if question.lower() in ["exit", "quit"]:
            break
        default_ = 'Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch, d·ªÖ hi·ªÉu, kh√¥ng l·∫∑p l·∫°i c√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát. N·∫øu kh√¥ng bi·∫øt th√¨ n√≥i "T√¥i kh√¥ng bi·∫øt".'
        answer = agent.run(question + "\n" + default_)
        print("üí¨ Tr·∫£ l·ªùi:", answer)
